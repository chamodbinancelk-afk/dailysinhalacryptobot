// =========================================================
// === src/index.js (FINAL COMPLETED INTEGRATION) ===
// =========================================================

// ... (CONFIG Block ‡∂ë‡∂ö ‡∂â‡∑Ñ‡∑Ö‡∑í‡∂±‡∑ä ‡∂≠‡∑í‡∂∂‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫) ...

// 2. Trading Bot Logic Imports
import { handleTradingWebhook, handleTradingScheduled } from './trading-logic.js'; 

// üö® News Bot Logic Imports (Comment ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì)
import { handleNewsWebhook, handleNewsScheduled } from './news-logic.js'; // ‚ö†Ô∏è ‡∂î‡∂∂‡∂ú‡∑ö ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä‡∑ö ‡∂±‡∂∏ ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂Ø‡∑ê‡∂∫‡∑í ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±


export default {
    
    // 1. üìÖ Scheduled Event 
    async scheduled(event, env, ctx) {
        
        // üö® Trading Bot Daily Post Logic
        await handleTradingScheduled(env, CONFIG); 
        
        // üö® News Bot Daily Post Logic (Comment ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì)
        await handleNewsScheduled(env, CONFIG, ctx); 
    },


    // 2. üîå Fetch Event 
    async fetch(request, env, ctx) {
        const url = new URL(request.url);
        
        // ... (Manual Triggers) ...
        
        // --- B. Telegram Webhook (POST Request) ---
        if (request.method === 'POST') {
            
            // 1. Trading Bot Logic ‡∑Ä‡∑ô‡∂≠ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ - CONFIG ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±!
            const tradingResponse = await handleTradingWebhook(request, env, CONFIG);
            
            // Trading Bot Logic ‡∂ë‡∂ö‡∂ß ‡∂ë‡∂∫ ‡∑Ñ‡∑É‡∑î‡∂ª‡∑î‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö‡∑í ‡∂±‡∂∏‡∑ä, ‡∂ë‡∂∫ return ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
            if (tradingResponse) { 
                return tradingResponse;
            }
            
            // 2. Trading Bot ‡∂ë‡∂ö‡∂ß ‡∂Ö‡∂Ø‡∑è‡∑Ö ‡∂±‡∑ê‡∂≠‡∑í‡∂±‡∂∏‡∑ä News Bot Logic ‡∑Ä‡∑ô‡∂≠ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ - CONFIG ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±!
            const newsResponse = await handleNewsWebhook(request, env, CONFIG);
            
            // News Bot Logic ‡∂ë‡∂ö ‡∂ë‡∂∫ ‡∑Ñ‡∑É‡∑î‡∂ª‡∑î‡∑Ä‡∂±‡∑ä‡∂±‡∑ö ‡∂±‡∂∏‡∑ä, ‡∂ë‡∂∫ return ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
            if (newsResponse) {
                 return newsResponse;
            }

            // 3. ‡∂ö‡∑í‡∑É‡∑í‡∂∏ Logic ‡∂ë‡∂ö‡∂ö‡∂ß ‡∑Ñ‡∑É‡∑î ‡∂±‡∑ú‡∑Ä‡∑î‡∑Ä‡∑Ñ‡∑ú‡∂≠‡∑ä, default OK ‡∂∫‡∑Ä‡∂±‡∑ä‡∂±
            return new Response('OK (Message received but not handled)', { status: 200 }); 
        }
        
        return new Response('Worker running.', { status: 200 });
    }
};
