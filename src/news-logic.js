// =================================================================
// === src/news-logic.js (FIXED - Unified Start Message) ===
// =================================================================

// --- ES MODULE IMPORTS ---
import { load } from 'cheerio';
import moment from 'moment-timezone';

// ... (CONSTANTS and UTILITY FUNCTIONS - No change) ...
// ... (GEMINI AI INTEGRATION - No change) ...
// ... (CORE FOREX NEWS LOGIC - No change) ...


// --- TELEGRAM WEBHOOK HANDLER ---

/**
 * Webhook Handler - Responds to /fundamental and /start commands.
 * @param {object} update - Telegram Webhook Update object
 * @param {object} env - Cloudflare Environment
 * @param {object} CONFIG - The unified configuration object from index.js
 * @returns {Response | null} - Returns null if the message is not handled by News Logic.
 */
export async function handleNewsWebhook(update, env, CONFIG) { 
    const CHAT_ID = CONFIG.TELEGRAM_CHAT_ID;
    const OWNER_ID = CONFIG.OWNER_CHAT_ID;

    if (!update.message || !update.message.text) {
        return null;
    }

    const text = update.message.text.trim();
    const command = text.split(' ')[0].toLowerCase();
    const userId = update.message.from.id;
    const chatId = update.message.chat.id;
    const messageId = update.message.message_id;
    const username = update.message.from.username || update.message.from.first_name;

    // --- 1. MANDATORY MEMBERSHIP CHECK (Only for /fundamental command) ---
    if (command === '/fundamental') {
        const isMember = await checkChannelMembership(userId, CONFIG);

        if (!isMember) {
            const denialMessage =
                `‚õî <b>Access Denied</b> ‚õî\n\n` +
                `Hey There <a href="tg://user?id=${userId}">${username}</a>,\n` +
                `You Must Join <b>${CHANNEL_LINK_TEXT}</b> Channel To Use This BOT.\n` +
                `So, Please Join it & Try Again.üëÄ Thank You ‚úçÔ∏è`;

            const replyMarkup = {
                inline_keyboard: [
                    [{
                        text: `üî• ${CHANNEL_LINK_TEXT} < / >`,
                        url: CHANNEL_LINK_URL
                    }]
                ]
            };

            await sendRawTelegramMessage(chatId, denialMessage, CONFIG, null, replyMarkup, messageId);
            return new Response('Handled by News Bot: Membership Check Failed', { status: 200 });
        }
    }

    // --- 2. COMMAND EXECUTION ---
    switch (command) {
        case '/start':
        case '/help': // üõë /help command ‡∂ë‡∂ö‡∂≠‡∑ä ‡∂∏‡∑ô‡∂≠‡∂±‡∑í‡∂±‡∑ä‡∂∏ handle ‡∂ö‡∂ª‡∂∫‡∑í.
            
            // Trading Bot Logic ‡∑Ä‡∂Ω‡∂ß ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ User Count Update ‡∂∏‡∑ô‡∂≠‡∑ê‡∂±‡∂ß ‡∂ú‡∑ô‡∂± ‡∂Ü‡∑Ä‡∑è
            const tradingLogic = await import('./trading-logic');
            await tradingLogic.updateAndEditUserCount(env, userId, CONFIG); 
            
            const replyText =
                `<b>üëã Welcome to the Trading & News Assistant Bot!</b>\n\n` +
                `‚ú® <b>Assistant Features (AI Trading Q&A)</b>\n\n` +
                `üíÅ‚Äç‚ôÇÔ∏è ‡∂î‡∂∂‡∂ß **Trading, Finance, Crypto** ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∂ï‡∂±‡∑ë‡∂∏ ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫‡∂ö‡∑ä ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω‡∑ô‡∂±‡∑ä ‡∂á‡∑É‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö.\n\n` +
                `‡∂ã‡∂Ø‡∑è: <code>Order Flow Concept ‡∂ë‡∂ö ‡∂∏‡∑ú‡∂ö‡∂Ø‡∑ä‡∂Ø?</code>\n\n` +
                `*‚ö†Ô∏è Limit:* ‡∂î‡∂∂‡∂ß ‡∂Ø‡∑í‡∂±‡∂ö‡∂ß *Trading Questions 5* ‡∂ö‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂á‡∑É‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö. Owner ‡∑Ñ‡∂ß Unlimited.\n\n` +
                `‚óá‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óá\n\n` +
                `üì∞ <b>News Feature</b>\n\n` +
                `üôã‚Äç‚ôÇÔ∏è Commands ‡∑Ä‡∂Ω Usage ‡∂ë‡∂ö ‡∂∏‡∑ô‡∑Ñ‡∑ô‡∂∏‡∂∫‡∑íüëá\n\n` +
                `‚óá <code>/fundamental</code> :- üì∞ Last Fundamental News\n\n` +
                `üéØ ‡∂∏‡∑ö BOT ‡∂¥‡∑ê‡∂∫ 24‡∂∏ Active ‡∂ë‡∂ö‡∑ö ‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑Ä‡∑è.üîî.. ‚úçÔ∏è\n\n` +
                `üöÄ <b>Developer :</b> @chamoddeshan\n` +
                `üî• <b>Mr Chamo Corporation ¬©</b>`;
            
            await sendRawTelegramMessage(chatId, replyText, CONFIG, null, null, messageId);
            return new Response('Handled by News Bot: /start or /help', { status: 200 });

        case '/fundamental':
            const messageKey = LAST_FULL_MESSAGE_KEY;
            const lastImageUrl = await readKV(env, LAST_IMAGE_URL_KEY);

            const lastFullMessage = await readKV(env, messageKey);

            if (lastFullMessage) {
                await sendRawTelegramMessage(chatId, lastFullMessage, CONFIG, lastImageUrl, null, messageId);
            } else {
                const fallbackText = "Sorry, no recent fundamental news has been processed yet. Please wait for the next update.";
                await sendRawTelegramMessage(chatId, fallbackText, CONFIG, null, null, messageId);
            }
            return new Response('Handled by News Bot: /fundamental', { status: 200 });

        default:
            // /fundamental command ‡∂ë‡∂ö ‡∑Ñ‡∑ê‡∂ª ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä commands / text Trading logic ‡∑Ä‡∑ô‡∂≠ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
            return null;
    }
}


// --- SCHEDULED HANDLER ---
// ... (handleNewsScheduled - No change) ...
